{
	"info": {
		"_postman_id": "2558241f-9f7f-4daa-842d-441244ef82a6",
		"name": "Postman-HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19364454"
	},
	"item": [
		{
			"name": "HW 1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Sergey&age=24",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "24",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"let respName = jsonData.name,\r",
									"    respAge = jsonData.age;\r",
									"\r",
									" console.log('name ' + respName + ' and age ' + respAge);\r",
									"\r",
									"pm.test(\"Check name\", function () {\r",
									"    pm.expect(respName).to.eql('Sergey');\r",
									"});\r",
									"\r",
									"pm.test(\"Check age\", function () {\r",
									"    pm.expect(respAge).to.eql(24);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Sergey&age=24&weight=60",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "weight",
									"value": "60"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Sergey&age=24&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Sergey&age=24&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Sergey&age=24&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "24",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW 2",
			"item": [
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2. Статус код 200 \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"3. Спарсить response body в json.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData);\r",
									"});\r",
									"\r",
									"pm.test(\"4. Проверить, что name в ответе равно name s request (name вбить руками.)\", function () {\r",
									"    let requestData = request.data;\r",
									"    pm.expect(requestData.name).to.eql('Sergey ');\r",
									"});\r",
									"\r",
									"pm.test(\"5. Проверить, что age в ответе равно age s request (age вбить руками.)\", function () {\r",
									"    let requestData = request.data;\r",
									"    pm.expect(requestData.age).to.eql(\"24\");\r",
									"});\r",
									"\r",
									"pm.test(\"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\", function () {\r",
									"    let requestData = request.data.salary; \r",
									"    requestData = Number(requestData);\r",
									"    pm.expect(requestData).to.eql(500);\r",
									"});\r",
									"\r",
									"pm.test(\"7. Спарсить request.\", function () {\r",
									"    let requestData = request.data\r",
									"    console.log(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"8. Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data;\r",
									"    pm.expect(responseData.name).to.eql(requestData.name);\r",
									"});\r",
									"\r",
									"pm.test(\"9. Проверить, что age в ответе равно age s request (age забрать из request.))\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data;\r",
									"    pm.expect(responseData.age).to.eql(requestData.age);\r",
									"});\r",
									"\r",
									"pm.test(\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data.salary; \r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData.salary).to.eql(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"11. Вывести в консоль параметр family из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData.family);\r",
									"});\r",
									"\r",
									"pm.test(\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data.salary; \r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData.salary).to.eql(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data.salary; \r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(requestData*4);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{nameVar}} ",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{ageVar}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salaryVar}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2. Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"3. Спарсить response body в json.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData);\r",
									"});\r",
									"\r",
									"pm.test(\"4. Спарсить request.\", function () {\r",
									"    let requestData = request.data;\r",
									"    console.log(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data;\r",
									"    pm.expect(responseData.name).to.eql(requestData.name);\r",
									"});\r",
									"\r",
									"pm.test(\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data;\r",
									"    pm.expect(responseData.age).to.eql(requestData.age);\r",
									"});\r",
									"\r",
									"pm.test(\"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = request.data.salary; \r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData.salary).to.eql(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"8. Вывести в консоль параметр family из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData.family);\r",
									"});\r",
									"\r",
									"pm.test(\"9. Проверить, что у параметра dog есть параметры name.\", function () {\r",
									"    let responseData = pm.response.json().family.pets.dog;\r",
									"    pm.expect(responseData).to.have.any.key('name');\r",
									"});\r",
									"\r",
									"pm.test(\"10. Проверить, что у параметра dog есть параметры age.\", function () {\r",
									"    let responseData = pm.response.json().family.pets.dog;\r",
									"    pm.expect(responseData).to.have.any.key('age');\r",
									"    // новое решение из телеги let check_name = \"name\" in  pm.response.json().family.pets.dog;\r",
									"});\r",
									"\r",
									"pm.test(\"11. Проверить, что параметр name имеет значение Luky.\", function () {\r",
									"    let responseData = pm.response.json().family.pets.dog.name;\r",
									"    pm.expect(responseData).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"pm.test(\"12. Проверить, что параметр age имеет значение 4.\", function () {\r",
									"    let responseData = pm.response.json().family.pets.dog.age;\r",
									"    pm.expect(responseData).to.eql(4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "24",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/object_info_3?name=Sergey&age=24&salary=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2. Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"3. Спарсить response body в json.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData);\r",
									"});\r",
									"\r",
									"pm.test(\"4. Спарсить request.\", function () {\r",
									"    let requestData = pm.request;\r",
									"    console.log(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = pm.request.url.query.toObject();\r",
									"    pm.expect(responseData.name).to.eql(requestData.name);\r",
									"});\r",
									"\r",
									"pm.test(\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json().age,\r",
									"        requestData = pm.request.url.query.toObject().age;\r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData).to.eql(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"7. Вывести в консоль параметр salary из request.\", function () {\r",
									"    let requestData = pm.request.url.query.toObject().salary;\r",
									"    console.log('salary:', requestData);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"8. Вывести в консоль параметр salary из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"9. Вывести в консоль 0-й элемент параметра salary из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log('0-й элемент:', responseData.salary[0]);\r",
									"});\r",
									"\r",
									"pm.test(\"10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log('1-й элемент:', responseData.salary[1]);\r",
									"});\r",
									"\r",
									"pm.test(\"11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log('2-й элемент:', responseData.salary[2]);\r",
									"});\r",
									"\r",
									"pm.test(\"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json().salary,\r",
									"        requestData = pm.request.url.query.toObject().salary;\r",
									"        requestData = Number(requestData);\r",
									"    pm.expect(responseData[0]).to.eql(requestData);\r",
									"});\r",
									"\r",
									"pm.test(\"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json().salary,\r",
									"        requestData = pm.request.url.query.toObject().salary;\r",
									"    pm.expect(Number(responseData[1])).to.eql(requestData*2);\r",
									"});\r",
									"\r",
									"pm.test(\"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function () {\r",
									"    let responseData = pm.response.json().salary,\r",
									"        requestData = pm.request.url.query.toObject().salary;\r",
									"    pm.expect(Number(responseData[2])).to.eql(requestData*3);\r",
									"});\r",
									"\r",
									"\r",
									"let getData = JSON.parse(responseBody),\r",
									"    dataName = getData.name,\r",
									"    dataAge = getData.age,\r",
									"    dataSalary = getData.salary[0];\r",
									"console.log('ТЕСТИМ ОКРУЖЕНИЕ:', dataName, dataAge, dataSalary)\r",
									"\r",
									"// 15. Создать в окружении переменную name\r",
									"// 18. Передать в окружение переменную name\r",
									"pm.environment.set(\"nameVar\", dataName);\r",
									"\r",
									"// 16. Создать в окружении переменную age\r",
									"// 19. Передать в окружение переменную age\r",
									"pm.environment.set(\"ageVar\", dataAge);\r",
									"\r",
									"// 17. Создать в окружении переменную salary\r",
									"// 20. Передать в окружение переменную salary\r",
									"pm.environment.set(\"salaryVar\", dataSalary);\r",
									"\r",
									"\r",
									"pm.test(\"21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\", () => pm.response.json().salary.forEach(el => console.log('элемент цикла:', el)));\r",
									"\r",
									"    let responseData = pm.response.json(),\r",
									"        requestData = pm.request.url.query.toObject();\r",
									"\r",
									"        console.log(responseData.salary)\r",
									"        console.log(requestData.salary)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text",
									"disabled": true
								},
								{
									"key": "age",
									"value": "24",
									"type": "text",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/object_info_4?name=Sergey&age=24&salary=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "24"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW 3",
			"item": [
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let  jsonToken = pm.response.json().token;\r",
									"console.log('Токен: ', jsonToken)\r",
									"\r",
									"pm.environment.set(\"auth_token\", jsonToken);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "str",
									"type": "text"
								},
								{
									"key": "password",
									"value": "str",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1) Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"    let schema = \r",
									"    {\r",
									"        \"person\": {\r",
									"        \"u_age\": 24,\r",
									"        \"u_name\": [\r",
									"            \"Sergey\",\r",
									"            500,\r",
									"            24\r",
									"        ],\r",
									"        \"u_salary_1_5_year\": 2000\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": 1450.0,\r",
									"    \"qa_salary_after_6_months\": 1000,\r",
									"    \"start_qa_salary\": 500\r",
									"};\r",
									"    let jsonResponce = pm.response.json();\r",
									"\r",
									"pm.test(\"2) Проверка структуры json в ответе.\", function () {\r",
									"    pm.expect(tv4.validate(jsonResponce, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\", function () {\r",
									"    let responseData = pm.response.json(), //результаты перемножения\r",
									"        startSalary = responseData.person.u_name[1]; //начальная зп для умножения на коэффициент\r",
									"    pm.expect(responseData.qa_salary_after_6_months).to.eql(startSalary*2);\r",
									"    pm.expect(responseData.qa_salary_after_12_months).to.eql(startSalary*2.9);\r",
									"    pm.expect(responseData.person.u_salary_1_5_year).to.eql(startSalary*4);\r",
									"});\r",
									"\r",
									"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http162.55.220.725005get_test_user\r",
									"let salary_1_5 = pm.response.json().person.u_salary_1_5_year;\r",
									"pm.environment.set(\"salary\", salary_1_5);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   { \r\n       \r\n    \"age\": 24,\r\n    \"salary\": 500,\r\n    \"name\": \"Sergey\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n\r\n     }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "500",
									"disabled": true
								},
								{
									"key": "age",
									"value": "24",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1) Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2) Проверка структуры json в ответе.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData);\r",
									"});\r",
									"\r",
									"pm.test(\"3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(Number(responseData.salary[1])).to.eql(responseData.salary[0]*2);\r",
									"    pm.expect(Number(responseData.salary[2])).to.eql(responseData.salary[0]*3);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
									"    let  jsonData = pm.response.json();\r",
									"    pm.expect(Number(jsonData.salary[2])).to.be.above(jsonData.salary[0]);\r",
									"    pm.expect(Number(jsonData.salary[2])).to.be.above(Number(jsonData.salary[1]));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{ageVar}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salaryVar}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{nameVar}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1) Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2) Проверка структуры json в ответе.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    console.log(responseData);\r",
									"});\r",
									"\r",
									"pm.test(\"3) Проверить что занчение поля name = значению переменной name из окружения\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        getEnvName = pm.environment.get(\"nameVar\");\r",
									"    pm.expect(responseData.name).to.eql(getEnvName);\r",
									"});\r",
									"\r",
									"pm.test(\"4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
									"    let responseData = pm.response.json(),\r",
									"        getEnvAge = request.data.age;\r",
									"    pm.expect(responseData.age).to.eql(getEnvAge);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{nameVar}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{ageVar}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}